---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: api-gateway
  name: api-gateway
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: api-gateway
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  ports:
    - name: "9200"
      port: 9200
      targetPort: 9200
    - name: "9300"
      port: 9300
      targetPort: 9300
  selector:
    io.kompose.service: elasticsearch
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  ports:
    - name: "3002"
      port: 3002
      targetPort: 3000
  selector:
    io.kompose.service: grafana
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  ports:
    - name: "5601"
      port: 5601
      targetPort: 5601
  selector:
    io.kompose.service: kibana
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: logstash
  name: logstash
spec:
  ports:
    - name: "12201"
      port: 12201
      protocol: UDP
      targetPort: 12201
  selector:
    io.kompose.service: logstash
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: nats
  name: nats
spec:
  ports:
    - name: "4222"
      port: 4222
      targetPort: 4222
  selector:
    io.kompose.service: nats
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: postgres
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    io.kompose.service: prometheus
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: api-gateway
  name: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: api-gateway
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/retail-microservices-nest-default: "true"
        io.kompose.service: api-gateway
    spec:
      containers:
        - args:
            - yarn
            - start:dev
            - api-gateway
          env:
            - name: DB_SOURCE
              value: postgresql://root:secret@postgres:5432/dev_db?sslmode=disable
            - name: NODE_ENV
              value: development
          image: api-gateway
          name: api-gateway
          ports:
            - containerPort: 3000
              hostPort: 3000
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /app
              name: api-gateway-claim0
      restartPolicy: Always
      volumes:
        - name: api-gateway-claim0
          persistentVolumeClaim:
            claimName: api-gateway-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: api-gateway-claim0
  name: api-gateway-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: elasticsearch
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/retail-microservices-nest-default: "true"
        io.kompose.service: elasticsearch
    spec:
      containers:
        - env:
            - name: discovery.type
              value: single-node
            - name: xpack.security.enabled
              value: "false"
          image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
          name: elasticsearch
          ports:
            - containerPort: 9200
              hostPort: 9200
              protocol: TCP
            - containerPort: 9300
              hostPort: 9300
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: elasticsearch-data
      restartPolicy: Always
      volumes:
        - name: elasticsearch-data
          persistentVolumeClaim:
            claimName: elasticsearch-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: elasticsearch-data
  name: elasticsearch-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/retail-microservices-nest-default: "true"
        io.kompose.service: grafana
    spec:
      containers:
        - env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
            - name: GF_SECURITY_ADMIN_USER
              value: admin
          image: grafana/grafana:latest
          name: grafana
          ports:
            - containerPort: 3000
              hostPort: 3002
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-data
      restartPolicy: Always
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: grafana-data
  name: grafana-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kibana
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/retail-microservices-nest-default: "true"
        io.kompose.service: kibana
    spec:
      containers:
        - image: docker.elastic.co/kibana/kibana:8.11.1
          name: kibana
          ports:
            - containerPort: 5601
              hostPort: 5601
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: logstash
  name: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: logstash
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/retail-microservices-nest-default: "true"
        io.kompose.service: logstash
    spec:
      containers:
        - image: docker.elastic.co/logstash/logstash:8.11.1
          name: logstash
          ports:
            - containerPort: 12201
              hostIP: 127.0.0.1
              hostPort: 12201
              protocol: UDP
          resources: {}
          volumeMounts:
            - mountPath: /usr/share/logstash/config/logstash.yml
              name: logstash-claim0
            - mountPath: /usr/share/logstash/pipeline
              name: logstash-claim1
      restartPolicy: Always
      volumes:
        - name: logstash-claim0
          persistentVolumeClaim:
            claimName: logstash-claim0
        - name: logstash-claim1
          persistentVolumeClaim:
            claimName: logstash-claim1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: logstash-claim0
  name: logstash-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: logstash-claim1
  name: logstash-claim1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: nats
  name: nats
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: nats
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/retail-microservices-nest-default: "true"
        io.kompose.service: nats
    spec:
      containers:
        - image: nats
          name: nats
          ports:
            - containerPort: 4222
              hostPort: 4222
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgres
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/retail-microservices-nest-default: "true"
        io.kompose.service: postgres
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: dev_db
            - name: POSTGRES_PASSWORD
              value: secret
            - name: POSTGRES_USER
              value: root
          image: postgres:16-alpine
          livenessProbe:
            exec:
              command:
                - pg_isready -U root -d dev_db
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
          name: postgres
          ports:
            - containerPort: 5432
              hostPort: 5432
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/retail-microservices-nest-default: "true"
        io.kompose.service: prometheus
    spec:
      containers:
        - image: prom/prometheus
          name: prometheus
          ports:
            - containerPort: 9090
              hostPort: 9090
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /etc/prometheus
              name: prometheus-claim0
      restartPolicy: Always
      volumes:
        - name: prometheus-claim0
          persistentVolumeClaim:
            claimName: prometheus-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus-claim0
  name: prometheus-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
    kompose.version: 1.31.2 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: users-service
  name: users-service
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: users-service
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose -f docker-compose.yml convert -o k8s.yml
        kompose.version: 1.31.2 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/retail-microservices-nest-default: "true"
        io.kompose.service: users-service
    spec:
      containers:
        - args:
            - yarn
            - start:dev
            - users
          env:
            - name: DB_SOURCE
              value: postgresql://root:secret@postgres:5432/dev_db?sslmode=disable
            - name: NODE_ENV
              value: development
          image: users-service
          name: users-service
          resources: {}
          volumeMounts:
            - mountPath: /app
              name: users-service-claim0
      restartPolicy: Always
      volumes:
        - name: users-service-claim0
          persistentVolumeClaim:
            claimName: users-service-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: users-service-claim0
  name: users-service-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

